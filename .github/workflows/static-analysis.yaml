name: IaC Statis Pipeline

on:
  push:
    branches-ignore:
      - dev
    paths:
      - 'infra/**'

permissions:
  contents: write
  security-events: write  # Ensure the action can upload SARIF results.

jobs:

  # Secret scanning job: Scans the repository for any secrets.
  secret-scan:
    name: "SECRET SCAN"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install git-secrets
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install  # Install git-secrets.

      - name: Scan for Secrets
        run: git secrets --scan --recursive  # Scan the repository for secrets.
        continue-on-error: true

      - name: Run TruffleHog to detect sensitive information
        run: |
          pip install truffleHog  # Install TruffleHog.
          trufflehog --regex --entropy=True .  # Run TruffleHog.
        continue-on-error: true

      - name: Upload Results as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-results
          path: secret-scan-results.txt  # Upload the results of the scan.

  # TFLint job: Runs TFLint to check Terraform files.
  tflint:
    name: "TFLINT"
    runs-on: ubuntu-latest
    permissions: write-all
    needs: secret-scan

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache TFLint plugin directory
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint and generate SARIF report
        run: |
          tflint -f sarif --chdir=infra/ --recursive > tflint.sarif
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tflint.sarif
          category: tflint

      - name: Upload TFLint SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: tflint-sarif
          path: tflint.sarif


  checkov:
    name: 'CHECKOV'
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Checkov PRISMA Policies
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform
          config_file: aws/CKV_LIST.yaml
          output_format: sarif
          output_file_path: prisma_policies.sarif
        continue-on-error: true


      - name: Upload Checkov SARIF Reports
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            prisma_policies.sarif
          category: checkov-analysis-1

      - name: Upload Checkov SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: prisma_policies-sarif
          path: prisma_policies.sarif

  tfsec:
    name: TFSEC
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: run report
        uses: aquasecurity/tfsec-sarif-action@v0.1.0
        with:
          sarif_file: tfsec.sarif          

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: tfsec.sarif
          category: tfsec

      - name: Upload TFSec SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfsec-sarif
          path: tfsec.sarif

  sonarqube:
    name: "SONAR"
    runs-on: self-hosted
    needs: tflint
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run SonarQube Analysis
        env:
          SONAR_PROJECT_KEY: techFriday
          SONAR_HOST_URL: http://sonarqube:9000
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}  # Use secrets for tokens
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.working.directory="/home/docker/.scannerwork"

  allsarifs:
    name: "GATHER ALL"
    runs-on: self-hosted
    needs: [tflint, checkov, tfsec]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download artifacts from other jobs
      - name: Download TFLint SARIF
        uses: actions/download-artifact@v3
        with:
          name: tflint-sarif
          path: .

      - name: Download Checkov SARIF
        uses: actions/download-artifact@v3
        with:
          name: prisma_policies-sarif
          path: .


      - name: Download TFSec SARIF
        uses: actions/download-artifact@v3
        with:
          name: tfsec-sarif
          path: .

      - name: Convert SARIF to SonarQube format
        run: |
          python3 allSarif.py


  sonarqubeRepo:
    name: "GATHER ALL"
    runs-on: self-hosted
    needs: [tflint, checkov, tfsec, sonarqube]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download artifacts from other jobs
      - name: Download TFLint SARIF
        uses: actions/download-artifact@v3
        with:
          name: tflint-sarif
          path: .

      - name: Download Checkov SARIF
        uses: actions/download-artifact@v3
        with:
          name: prisma_policies-sarif
          path: .


      - name: Download TFSec SARIF
        uses: actions/download-artifact@v3
        with:
          name: tfsec-sarif
          path: .

      - name: Convert SARIF to SonarQube format
        run: |
          ls -lias
          python3 sarifToSonar.py

      - name: Upload Issues to SonarQube
        env:
          SONAR_PROJECT_KEY: techFriday
          SONAR_HOST_URL: http://sonarqube:9000
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}  # Use secrets for tokens
        run: |
          ls -lias
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scm.disabled=true \
            -Dsonar.externalIssuesReportPaths=all.json